---
- name: assert that dante user name starts with dante_
  assert:
    that: dante_user.startswith('dante_')
    fail_msg: "dante username '{{ dante_user }}' must start with 'dante_'"
  tags: lin_dante_user

- name: create dante proxy user
  # see: https://docs.ansible.com/ansible/latest/modules/user_module.html#user-module
  user:
    name: "{{ dante_user }}"
    state: present
    # see: https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html#hash-filters
    password: "{{ dante_pass | password_hash('sha512', dante_salt) }}"
    update_password: always
    group: users
    shell: /usr/sbin/nologin
    home: /usr/sbin
    create_home: no
    generate_ssh_key: no
  notify: restart dante service
  tags: lin_dante_user


- name: configure dante server
  template:
    src: danted.conf
    dest: /etc/danted.conf
    mode: 0644
  notify: restart dante service
  tags: lin_dante_conf


- name: install dante server (ubuntu xenial)
  # see: https://launchpad.net/ubuntu/bionic/amd64/dante-server/1.4.2+dfsg-2build1
  apt:
    deb: "{{ dante_deb_url }}"
  when: ansible_lsb.codename == 'xenial'
  register: dante_install_xenial_result
  # workaround for network problems on a cheap VPS with low memory
  until: "'timed out' not in dante_install_xenial_result.msg |default('')"
  tags: lin_dante_install

- name: install dante server (ubuntu bionic)
  apt:
    name: dante-server
  when: ansible_lsb.codename == 'bionic'
  register: dante_install_bionic_result
  tags: lin_dante_install


- name: temporarily stop dante service after fresh install
  # note: this step is a workaround.
  #       without this "recycling" the service might end up disabled.
  systemd:
    name: danted
    state: stopped
    enabled: no
    daemon_reload: yes
  when: dante_install_xenial_result is changed or dante_install_bionic_result is changed
  tags: lin_dante_service

- name: enable dante service
  systemd:
    name: danted
    state: started
    enabled: yes
    daemon_reload: yes
  tags: lin_dante_service


- name: open dante port, if allowed
  ufw:
    rule: "{{ dante_direct |ternary('allow','deny') }}"
    port: "{{ dante_port |string }}"
  no_log: true
  tags: lin_dante_firewall

- meta: flush_handlers
...
